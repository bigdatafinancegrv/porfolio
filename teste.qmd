---
title: "Forecast"
format:
  dashboard:
    theme: 
      - cosmo
      - brand
      - dark
    css: styles.css
    orientation: rows
    scrolling: true
    navbar: true
---

```{r , include=FALSE}
#@title Carrega os pacotes do R
suppressPackageStartupMessages({
  library(tidyverse)
  library(tsibble)
  library(fpp3)
  library(quantmod)
  library(timetk)
  library(openxlsx)
  library(rugarch)
})
cat("======================================================================\n")
cat("Carregamento dos pacotes do R, finalizada\n")
cat("======================================================================\n")
```

```{r , include=FALSE}

#@title Defina seus tickers
tickers <- c(
    "F", 
    "STLA", 
    "GM", 
    "TM", 
    "HMC" 
)
cat("======================================================================\n")
cat("Lista de tickers definida.\n")
cat("======================================================================\n")

```

```{r , include=FALSE}

#@title Baixa pre√ßos hist√≥ricos e calcula log-retornos
options(warn = -1)
portfolioPrices <- NULL
for (Ticker in tickers) {
  portfolioPrices <- cbind(
    portfolioPrices,
    quantmod::getSymbols.yahoo(
      Ticker,
      from = "2019-01-01",
      auto.assign = FALSE
    )[,4]
  )
}
portfolioPrices <- portfolioPrices[apply(portfolioPrices, 1, function(x) all(!is.na(x))),]

log_returns <- log(portfolioPrices) - log(lag(portfolioPrices))
log_returns <- na.omit(log_returns)
log_returns <- log_returns |> timetk::tk_tbl(preserve_index = TRUE, rename_index = "date")
tail(log_returns)  # √∫ltima data dispon√≠vel

```

```{r}

#@title Gr√°fico est√°tico de log-retornos
df_long <- log_returns %>%
  pivot_longer(cols = -date, names_to = "Variables", values_to = "Value")

ggplot(df_long, aes(x = date, y = Value)) +
  geom_line() +
  facet_wrap(~ Variables, scales = "free_y", ncol = 2) +
  labs(
    title = "Retornos Hist√≥ricos por Ativo",
    x = "Data",
    y = "Log-retorno"
  ) +
  scale_x_date(date_breaks = "6 months", date_labels = "%b %Y") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "white", colour = "white"),
    axis.text.x     = element_text(angle = 45, hjust = 1)
  )

```

```{r , include=FALSE}


#@title Converte para tsibble
long_returns <- log_returns %>%
  pivot_longer(-date, names_to = "asset", values_to = "ret")

tsbl_returns <- long_returns %>%
  as_tsibble(key = asset, index = date)

```

```{r , include=FALSE}


#@title Ajuste do modelo TSLM com quebras
models_all <- tsbl_returns %>%
  model(
    Regr_Quebras = TSLM(ret ~ trend(knots = c(2020, 2022, 2024)))
  )

```

```{r , include=FALSE}


#@title Definir os pr√≥ximos 22 dias √∫teis
last_date <- max(tsbl_returns$date)
future_dates_all <- seq.Date(from = last_date + 1, by = "day", length.out = 30)
future_biz <- future_dates_all[!weekdays(future_dates_all) %in% c("Saturday", "Sunday")][1:22]
future_biz

```

```{r , include=FALSE}


#@title Criar tsibble de novos dados para simula√ß√£o
# 1. Gere calend√°rio suficiente √† frente para capturar 22 dias √∫teis
future_dates_all <- seq.Date(from   = last_date + 1,
                              by     = "day",
                              length.out = 50)

# 2. Filtre somente segunda‚Äìsexta e pegue os 22 primeiros
future_biz <- head(
  future_dates_all[!weekdays(future_dates_all) %in% c("Saturday", "Sunday")],
  22
)

# 3. Construa o tsibble sem NAs
future_tsbl <- tibble(
  asset = rep(unique(tsbl_returns$asset), each = length(future_biz)),
  date  = rep(future_biz, times = length(unique(tsbl_returns$asset)))
) %>%
  as_tsibble(key = asset, index = date)

future_tsbl




```

```{r , include=FALSE}

#@title Gerar simula√ß√µes para os pr√≥ximos 22 dias √∫teis
sims_all <- models_all %>%
  generate(
    new_data  = future_tsbl,
    times     = 3,
    bootstrap = TRUE
  )
sims_all %>% arrange(asset, .rep, date) %>% slice_head(n = 6)


```

```{r , include=FALSE}


#@title Calcular volatilidades via GARCH (sstd) para cada ativo
vol_list <- list()
for (a in unique(tsbl_returns$asset)) {
  # S√©rie hist√≥rica de retornos
  rets_hist <- tsbl_returns %>% filter(asset == a) %>% pull(ret)
  # Especifica√ß√£o GARCH(1,1) com distribui√ß√£o skewed Student-t
  spec <- ugarchspec(
    variance.model     = list(model = "sGARCH", garchOrder = c(1,1)),
    mean.model         = list(armaOrder = c(0,0), include.mean = TRUE),
    distribution.model = "sstd"
  )
  fit <- ugarchfit(spec = spec, data = rets_hist, solver = "hybrid", silent = TRUE)
  fc  <- ugarchforecast(fit, n.ahead = length(future_biz))
  vols <- sigma(fc)
  vol_list[[a]] <- tibble(date = future_biz, volatility = as.numeric(vols))
}



```

```{r}


#@title Plots dos forecasts e cen√°rios simulados
library(lubridate)

# define o in√≠cio da janela (1 m√™s antes da √∫ltima data)
window_start <- last_date - months(1)

# filtra os retornos hist√≥ricos apenas a partir desse ponto
recent_ts <- tsbl_returns %>%
  filter(date >= window_start)

# gera o gr√°fico combinando dados reais e simula√ß√µes
autoplot(
  recent_ts,
  ret
) +
  geom_line(
    aes(y = .sim, colour = as.factor(.rep)),
    data = sims_all
  ) +
  facet_wrap(~ asset, scales = "free_y") +
  labs(
    title = "Simula√ß√µes de retornos futuros (22 dias √∫teis)",
    x     = "Data",
    y     = "Log-retorno"
  ) +
  guides(colour = "none") +
  theme_minimal()



```

```{r , include=FALSE}


#@title Exportar retornos e volatilidades projetados por ativo
assets <- unique(sims_all$asset)
dir.create("forecasts", showWarnings = FALSE)

for (a in assets) {
  df_sim  <- sims_all %>% filter(asset == a) %>% select(date, .rep, .sim)
  vol_df  <- vol_list[[a]]
  df_join <- df_sim %>% left_join(vol_df, by = "date")
  df_wide <- df_join %>%
    pivot_wider(names_from = .rep,
                values_from = .sim,
                names_prefix = "sim_")
  # Excel
  wb <- createWorkbook()
  addWorksheet(wb, a)
  writeData(wb, sheet = a, x = df_wide)
  saveWorkbook(
    wb,
    file      = file.path("forecasts", paste0(a, "_forecast.xlsx")),
    overwrite = TRUE
  )
  # CSV
  write.csv2(
    df_wide,
    file      = file.path("forecasts", paste0(a, "_forecast.csv")),
    row.names = FALSE
  )
}



```

```{r , include=FALSE}


#@title Consolida√ß√£o em √∫nico Excel formatado (PT-BR, 6 casas decimais)
date_style <- createStyle(numFmt = "[$-pt-BR]ddd dd/mm/yyyy")
dec6_style <- createStyle(numFmt = "0.000000")
wb <- createWorkbook()
cenarios <- sort(unique(sims_all$.rep))

for (c in cenarios) {
  df_c <- sims_all %>%
    filter(.rep == c) %>%
    select(date, asset, .sim) %>%
    pivot_wider(names_from = asset, values_from = .sim)
  sheet <- paste0("cenario_", c)
  addWorksheet(wb, sheet)
  writeData(wb, sheet = sheet, x = df_c)
  addStyle(wb, sheet = sheet, style = date_style,
           cols = 1, rows = 2:(nrow(df_c)+1), gridExpand = TRUE)
  num_cols <- which(sapply(df_c, is.numeric))
  addStyle(wb, sheet = sheet, style = dec6_style,
           cols = num_cols, rows = 2:(nrow(df_c)+1), gridExpand = TRUE)
  setColWidths(wb, sheet = sheet, cols = 1:ncol(df_c), widths = "auto")
}

saveWorkbook(wb, file = "portfolio_scenarios.xlsx", overwrite = TRUE)
cat("==================================================================\n")
cat("üìä portfolio_scenarios.xlsx gerado com sucesso!\n")
cat("==================================================================\n")



```

```{r , include=FALSE}


#@title Link de download no Colab
if (!requireNamespace("IRdisplay", quietly = TRUE)) {
  install.packages("IRdisplay", repos = "https://cloud.r-project.org")
}
library(IRdisplay)
display_html('
  <div style="font-size:16px; margin:10px 0;">
    <a href="portfolio_scenarios.xlsx" download
       style="padding:8px 12px; background:#4CAF50; color:white;
              text-decoration:none; border-radius:4px;">
      üì• Baixar portfolio_scenarios.xlsx
    </a>
  </div>
')



```
