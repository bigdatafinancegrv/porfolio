---
title: "Análise de Ações"
format:
  dashboard:
    theme: 
      - cosmo
      - brand
      - dark
    css: styles_acoes.css
    orientation: rows
    scrolling: true
    navbar: true
    
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(
    echo = FALSE,
    message = FALSE,
    warning = FALSE,
    comment = NA,
    fig.width = 10,
    fig.height = 7
)

library(reticulate)

# Carregar bibliotecas
library(quantmod)
library(tidyverse)
library(timetk)
library(lubridate)
library(zoo)
library(rugarch)
library(patchwork)
library(DT)

# Definir tema escuro para todos os gráficos ggplot2
tema_escuro <- theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#121212", color = NA),
    panel.background = element_rect(fill = "#121212", color = NA),
    panel.grid.major = element_line(color = "#333333"),
    panel.grid.minor = element_line(color = "#262626"),
    text = element_text(color = "#FFFFFF"),
    axis.text = element_text(color = "#CCCCCC"),
    axis.title = element_text(color = "#FFFFFF"),
    legend.background = element_rect(fill = "#121212", color = NA),
    legend.text = element_text(color = "#FFFFFF"),
    legend.title = element_text(color = "#FFFFFF"),
    plot.title = element_text(color = "#FFFFFF", size = 16),
    plot.subtitle = element_text(color = "#CCCCCC")
  )

theme_set(tema_escuro)  # Aplicar o tema escuro globalmente
```

```{r, include=FALSE}
# Definir os tickers
tickers <- c("F", "GM", "HMC", "STLA", "TM")

# Definir período: últimos 5 anos
start_date <- Sys.Date() - years(5)
end_date   <- Sys.Date()

# Baixar os dados do Yahoo Finance
getSymbols(tickers, src = "yahoo", from = start_date, to = end_date)

# Selecionar o fechamento (Cl) e juntar em um único data frame
price_list <- lapply(tickers, function(sym) Cl(get(sym)))
portfolio_prices <- do.call(merge, price_list)
colnames(portfolio_prices) <- tickers
portfolio_prices <- na.omit(portfolio_prices)
portfolio_prices <- tk_tbl(portfolio_prices, preserve.row.names = TRUE, rename_index = "date")
portfolio_prices$date <- as.Date(portfolio_prices$date)
```


A análise dos picos em gráficos de retorno acumulado é vital para entender a volatilidade e o histórico de valorização dos ativos. Esses picos indicam momentos de forte alta e ajudam a identificar tendências e o perfil de risco.

Esses dados, especialmente a amplitude e frequência dos picos, são cruciais para o Modelo de Markowitz. Eles permitem estimar retornos e calcular a volatilidade (risco), além de analisar as correlações entre ativos, 
fundamentos para otimizar a relação risco-retorno na construção de carteiras eficientes.

- **Identificação de Tendências:** Picos sucessivos em patamares mais altos podem indicar uma tendência de alta no longo prazo, enquanto picos em patamares decrescentes podem sinalizar uma tendência de baixa.

- **Avaliação de Risco:** A intensidade e a frequência dos picos (e vales) fornecem insights sobre a volatilidade do ativo. Ativos com picos muito acentuados e quedas igualmente bruscas são geralmente mais voláteis e, portanto, mais arriscados.

- **Comportamento em Diferentes Cenários:** Observar como os ativos se comportam durante períodos de euforia (picos) e correção (vales) pode revelar sua resiliência e sensibilidade a fatores de mercado.
```{r}

# Pacotes
library(quantmod)
library(dygraphs)
library(RColorBrewer)

# Tickers
tickers <- c("F", "GM", "HMC", "STLA", "TM")

# Função de retorno acumulado
get_ret_xts <- function(ticker) {
  data <- Ad(getSymbols(ticker, from = "2020-01-01", auto.assign = FALSE))
  colnames(data) <- "price"
  data_ret <- data / as.numeric(first(data)) * 100
  colnames(data_ret) <- ticker
  return(data_ret)
}

# Junta todas as séries
dados_xts <- do.call(merge, lapply(tickers, get_ret_xts))

# Gráfico com estilo escuro
dygraph(dados_xts, main = "Retorno Acumulado (Base 100)") %>%
  dyOptions(
    colors = c("#FF4136", "#0074D9", "#2ECC40", "#FF851B", "#B10DC9"),
    drawGrid = FALSE,
    includeZero = FALSE,
    useDataTimezone = TRUE,
    axisLineColor = "white",
    axisLabelColor = "white"
  ) %>%
  dyLegend(show = "always", labelsSeparateLines = TRUE, width = 300) %>%
  dyCSS("dygraph-dark.css") %>%
  dyRangeSelector() %>%
  htmlwidgets::onRender("
    function(el, x) {
      // Move legend container to top-right corner
      var legend = el.querySelector('.dygraph-legend');
      legend.style.position = 'absolute';
      legend.style.top = '10px';
      legend.style.right = '200px';
      legend.style.background = 'rgba(0,0,0,0.5)';
      legend.style.padding = '5px 10px';
      legend.style.borderRadius = '5px';
      legend.style.color = 'white';
      legend.style.zIndex = 1000;
    }
  ")


```




```{r}
#| label: real-stock-prices-table
#| echo: false
#| message: false
#| warning: false

library(quantmod) # Para getSymbols
library(DT)       # Para datatable
library(dplyr)    # Para manipulação de dados
library(tidyr)    # Para pivot_wider

# Processar os dados para um formato adequado ao DT
# Criar uma lista para armazenar os preços de fechamento de cada ticker
prices_list <- list()

for (ticker in tickers) {
  # Pega o objeto xts correspondente ao ticker
  # Usa get() para acessar a variável com o nome do ticker
  stock_data <- get(ticker)
  
  # Extrai apenas os preços de fechamento (Close price), que geralmente é a coluna 4 ou termina com ".Close"
  # O nome exato da coluna pode variar ligeiramente (ex: 'F.Close', 'GM.Close')
  close_prices <- Cl(stock_data) # Cl() é uma função de quantmod para extrair o preço de fechamento
  
  # Converte para data.frame e adiciona o nome do ticker
  prices_list[[ticker]] <- data.frame(
    Date = index(close_prices),
    Price = as.numeric(coredata(close_prices)),
    Asset = ticker
  )
}

# Combinar todos os data.frames da lista em um único data.frame
all_prices_df <- bind_rows(prices_list)

# Pivotar para o formato largo: DATE, F, GM, HMC, STLA, TM
df_table_real <- all_prices_df %>%
  pivot_wider(
    names_from = Asset,
    values_from = Price
  ) %>%
  rename(DATE = Date) %>%
  # Opcional: Filtrar para um número menor de linhas se você quiser simular a imagem
  # Você pode ajustar as datas ou o head() aqui
  arrange(desc(DATE)) %>% # Ordena por data mais recente primeiro
  head(8) %>% # Pega as últimas 8 linhas (para se assemelhar à imagem de exemplo)
  arrange(DATE) # Ordena de volta para datas mais antigas primeiro, como na sua imagem


# Formatar as colunas de preço para moeda
for (col in tickers) {
  df_table_real[[col]] <- paste0("$", format(round(df_table_real[[col]], 2), nsmall = 2))
}

# Criar a tabela interativa com DT
datatable(
  df_table_real,
  rownames = FALSE,
  options = list(
    dom = 't<"bottom"lip>', # Apenas tabela, info, paginate, sem search acima
    paging = FALSE,         # Desativa a paginação
    searching = FALSE,      # Desativa a caixa de busca padrão
    info = FALSE,           # Desativa a informação "Showing X of Y entries"
    autoWidth = TRUE,
    columnDefs = list(
      list(width = '120px', targets = 0), # Largura para a coluna DATE
      list(className = 'dt-center', targets = 1:(ncol(df_table_real)-1)) # Alinhamento para as colunas de preço
    ),
    rowCallback = JS(
      "function(row, data, index) {",
      "  var value;",
      "  for (var i = 1; i < data.length; i++) {",
      "    var cell = $('td:eq(' + i + ')', row);",
      "    // Adiciona classes para estilização de fundo roxo-degradê (necessita de CSS externo)
      ",
      "    if (i === 1) cell.addClass('col-f');",
      "    else if (i === 2) cell.addClass('col-gm');",
      "    else if (i === 3) cell.addClass('col-hmc');",
      "    else if (i === 4) cell.addClass('col-stla');",
      "    else if (i === 5) cell.addClass('col-tm');",
      "  }",
      "}"
    ),
    headerCallback = JS(
      "function(thead, data, start, end, display) {",
      "  var header = $(thead).find('th');",
      "  $(header[0]).addClass('header-date');", # Coluna DATE
      "  $(header[1]).addClass('header-f');",    # Coluna F
      "  $(header[2]).addClass('header-gm');",   # Coluna GM
      "  $(header[3]).addClass('header-hmc');",  # Coluna HMC
      "  $(header[4]).addClass('header-stla');", # Coluna STLA
      "  $(header[5]).addClass('header-tm');",   # Coluna TM
      "}"
    )
  ),
  class = 'display compact cell-border'
)
```



Este gráfico apresenta a distribuição dos retornos diários (%) das ações das empresas F, GM, HMC, STLA e TM por meio de boxplots, facilitando a comparação da volatilidade e tendência central de cada uma.

Aqui estão alguns destaques:

Todas as empresas apresentam mediana próxima de 0%, o que é comum para retornos diários em períodos longos.

As ações da Ford (F) e da Stellantis (STLA) parecem ter uma distribuição mais espalhada, com uma amplitude interquartil maior, indicando maior volatilidade.

Toyota (TM) e Honda (HMC) possuem uma distribuição mais concentrada, sugerindo retornos diários mais estáveis.

Há diversos outliers (pontos fora das "caixas"), tanto positivos quanto negativos, que representam dias com retornos extremos — possivelmente ligados a eventos específicos no mercado.

Este gráfico complementa bem o gráfico anterior ao fornecer uma visão estatística clara da variabilidade e simetria dos retornos de cada empresa.

```{r}
#| warning: false
#| message: false
#| fig.height: 6
#| fig.width: 8

library(quantmod)
library(tidyverse)
library(plotly)
library(lubridate)

# Calcular retornos logarítmicos diários para cada ação
returns_list <- lapply(tickers, function(ticker) {
  precios <- Cl(get(ticker))  # Fechamento ajustado
  retornos <- dailyReturn(precios, type = "log")
  tibble(
    Empresa = ticker,
    Retorno = as.numeric(retornos),
    Data = index(retornos)
  )
})

# Unir todos os dados em um único dataframe
df <- bind_rows(returns_list)

# Criar boxplot interativo com fundo escuro e letras brancas
plot_ly(
  data = df,
  x = ~Empresa,
  y = ~Retorno,
  type = "box",
  color = ~Empresa,
  boxpoints = "all",
  jitter = 0.3,
  pointpos = -1.8
) %>%
  layout(
    title = list(text = "", font = list(color = "#FFFFFF")),
    yaxis = list(title = "", color = "#FFFFFF", tickfont = list(color = "#FFFFFF")),
    xaxis = list(title = "", color = "#FFFFFF", tickfont = list(color = "#FFFFFF")),
    plot_bgcolor = "#000000",
    paper_bgcolor = "#000000",
    font = list(color = "#FFFFFF")
  )


```
